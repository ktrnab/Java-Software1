import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Katrina B
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.println("<title>");

        int childNum = getChildElement(channel, "title");

        String title = "Empty Title";

        if (channel.child(childNum).numberOfChildren() == 0) {

            out.println(title);

        } else {

            title = channel.child(childNum).child(0).label();
            out.println(title);

        }

        out.println("</title>");
        out.println("</head>");

        out.println("<body>");
        childNum = getChildElement(channel, "link");
        String linkFeed = channel.child(childNum).child(0).label();
        out.print("<h1><a href=\"");
        out.print(linkFeed);
        out.print("\">");
        out.print(title);
        out.println("</a></h1>");

        out.println("<p>");
        childNum = getChildElement(channel, "description");

        String description = "No description";

        if (channel.child(childNum).numberOfChildren() == 0) {

            out.println(description);

        } else {

            description = channel.child(childNum).child(0).label();
            out.println(description);

        }
        out.println("</p>");
        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int childIterator = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).isTag()) {
                if (xml.child(i).label().equals(tag)) {
                    childIterator = i;
                }
            }
        }

        return childIterator;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        String pubDate = "";
        String title = "";
        String source = "";
        String sourceUrl = "";
        String link = "";
        String description = "";

        int pubDateID = getChildElement(item, "pubDate");
        int titleID = getChildElement(item, "title");
        int sourceID = getChildElement(item, "source");
        int linkID = getChildElement(item, "link");
        int descriptionID = getChildElement(item, "description");

        if (pubDateID != -1) {

            pubDate = item.child(pubDateID).child(0).label();
            out.println("<td>" + pubDate + "</td>");

        } else {

            out.println("<td>No data available</td>");
        }

        if (sourceID != -1) {

            if (item.child(sourceID).numberOfChildren() > 0) {
                source = item.child(sourceID).child(0).label();

            } else {

                source = "No source available";
            }

            sourceUrl = item.child(sourceID).attributeValue("url");
            out.println(
                    "<td><a href=" + sourceUrl + ">" + source + "</a></td>");
        } else {

            out.println("<td>No source available</td>");
        }

        if (titleID != -1) {

            if (item.child(titleID).numberOfChildren() > 0) {
                title = item.child(titleID).child(0).label();

            } else {

                description = item.child(descriptionID).child(0).label();
                out.println("<td>" + description + "</td>");

            }
            if (linkID != -1) {

                link = item.child(linkID).child(0).label();
                out.println("<td><a href=" + link + ">" + title + "</a></td>");

            } else {

                out.println("<td>" + title + "</td>");
            }
        } else {

            description = item.child(descriptionID).child(0).label();
            out.println("<td>" + description + "</td>");
        }

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree feed = new XMLTree1(url);
        feed.display();

        if (feed.label().equals("rss") && feed.hasAttribute("version")
                && feed.attributeValue("version").equals("2.0")) {

            feed = new XMLTree1(url);
            XMLTree channel = feed.child(getChildElement(feed, "channel"));

            SimpleWriter fileOut2 = new SimpleWriter1L(file);
            outputHeader(channel, fileOut2);

            for (int j = 0; j < channel.numberOfChildren(); j++) {
                if (channel.child(j).isTag()) {
                    if (channel.child(j).label().equals("item")) {
                        XMLTree item = channel.child(j);
                        processItem(item, fileOut2);
                    }
                }
            }

            outputFooter(fileOut2);

        } else {

            out.println("The URL is not a valid RSS 2.0 file.");
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter XML input file: ");
        String userUrl = in.nextLine();

        out.print("Enter the name of the file with a .html extension: ");
        String fileName = in.nextLine();

        XMLTree tree = new XMLTree1(userUrl);

        SimpleWriter fileOut = new SimpleWriter1L(fileName);

        if (tree.hasAttribute("title")) {
            fileOut.println("<html><head><title>" + tree.attributeValue("title")
                    + "</title></head>");
        }

        fileOut.println("<body><h2>" + tree.attributeValue("title") + "</h2>");
        fileOut.println("<ul>");

        for (int i = 0; i < tree.numberOfChildren(); i++) {

            processFeed(tree.child(i).attributeValue("url"),
                    tree.child(i).attributeValue("file"), out);
            fileOut.println("<li><a href="
                    + tree.child(i).attributeValue("file") + ">"
                    + tree.child(i).attributeValue("name") + "</a></li>");
        }

        fileOut.println("</ul></body></html>");

        in.close();
        out.close();

    }

}
